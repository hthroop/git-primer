---
format:
  revealjs: 
    theme:
    - dark
    - custom.scss
---

::: custom_title
version control with git <span style="color:#f34c26">{{< fa brands git-alt size=1x >}}</span> and GitHub <span style="color:#74C0FC">{{< fa brands github size=1x >}}</span>
:::

```{mermaid}
%%| label: opening-slide
%%| fig-width: 10000000
%%{init: { 'logLevel': 'debug', 'theme': 'dark' , 'themeVariables': {
'commitLabelFontSize': '16px'
} } }%%
gitGraph
  commit id: "initialize"
  commit id: "add README"
  commit id: "add model"
  branch microbial
  checkout microbial
  commit id: "microbial params"
  branch chemistry
  checkout chemistry
  commit id: "chemistry params"
  checkout microbial
  merge chemistry
  checkout main
  merge microbial
  commit id: "one-pool model"
```


## {#boykis_on_git data-menu-title="Vicky Boykis on Git" .center}

![](images/boykis_on_git.png){fig-align="center"}


## {#agenda data-menu-title="agenda"}

AGENDA

::: very_small_text

[workflows]{style="font-weight:bold; color:yellow;"}

- <u>Describe</u> various coding workflows
- <u>Paraphrase</u> how version control workflows facilitate collaboration on code products

[Git & GitHub]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the difference between Git and GitHub
- <u>Navigate</u> GitHub via a web browser
:::

::: {.column width="50%"}
- <u>Use</u> GitHub to create a new repository
- <u>Edit</u> a new repository through GitHub's interface
:::

::::

[RStudio (local <--> cloud)]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the computer-to-GitHub order of operations
- <u>Define</u> fundamental Git vocabulary
:::

::: {.column width="50%"}
- <u>Create</u> a local version-controlled repository that is connected to GitHub
:::

::::

[advanced topics: conflicts, branches, forks]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the causes of merge conflicts
- <u>Explain</u> how to avoid merge conflicts
:::

::: {.column width="50%"}
- <u>Summarise</u> what to do if a merge conflict occurs
:::

::::


[project management: issues, projects, READMEs]{style="font-weight:bold; color:yellow;"}

[miscellaneous: data, best practices]{style="font-weight:bold; color:yellow;"}

:::


## {#what_is_it data-menu-title="what is it"}


**what it is:**

  * an [open-source]{style="color:yellow;"}, [distributed]{style="color:yellow;"} version control system designed for [speed and efficiency]{style="color:yellow;"}[^1]

[^1]: [introduction-to-git](https://speakerdeck.com/schacon/introduction-to-git?slide=13)


## {#git_github data-menu-title="github is not git" .center}

::: {style="text-align: center;"}

<span style="color:#f34c26">{{< fa brands git-alt size=5x >}}</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<span style="font-size:2em;">!=</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<span style="color:#74C0FC">{{< fa brands github size=5x >}}</span>

:::

<br>

::: smaller_text

- Git: version control software used to track files in a directory (a repository)
  + Git creates the versioned history of a repository
- GitHub: website that allows users to store their Git repositories and share them with others (i.e., a graphical user interface)

:::


## {#not_just_github data-menu-title="not just github" .center}

::: {style="text-align: center;"}

<span style="color:#f34c26">{{< fa brands gitlab size=5x >}}</span>
<span style="color:#74C0FC">{{< fa brands github size=5x >}}</span>
<span style="color:#1d78f3">{{< fa brands bitbucket size=5x >}}</span>
[self host]{style="font-size:1.6em;"}

:::


## [git]{style="color:#f34c26"} organization {.smaller}

::: smaller_text
the repository (think directory) is the fundamental organizational unit
:::

::: {.fragment}
<i style=color:red; class="fa-solid fa-ban"></i> [do not add repositories to synchronized storage]{style="color:red;"}
:::

::: {style="background:white; width:40%; display:block; margin-left:auto; margin-right:auto"}
![](images/organization_git.png){fig-align="center"}
:::


## {#agenda-coding data-menu-title="agenda-coding"}

AGENDA

::: very_small_text

::: {style="opacity:0.3;"}

[workflows]{style="font-weight:bold; color:yellow;"}

- <u>Describe</u> various coding workflows
- <u>Paraphrase</u> how version control workflows facilitate collaboration on code products

:::

[Git & GitHub]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the difference between Git and GitHub
- <u>Navigate</u> GitHub via a web browser
:::

::: {.column width="50%"}
- <u>Use</u> GitHub to create a new repository
- <u>Edit</u> a new repository through GitHub's interface
:::

::::

[RStudio (local <--> cloud)]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the computer-to-GitHub order of operations
- <u>Define</u> fundamental Git vocabulary
:::

::: {.column width="50%"}
- <u>Create</u> a local version-controlled repository that is connected to GitHub
:::

::::

::: {style="opacity:0.3;"}

[advanced topics: conflicts, branches, forks]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the causes of merge conflicts
- <u>Explain</u> how to avoid merge conflicts
:::

::: {.column width="50%"}
- <u>Summarise</u> what to do if a merge conflict occurs
:::

::::


[project management: issues, projects, READMEs]{style="font-weight:bold; color:yellow;"}

[miscellaneous: data, best practices]{style="font-weight:bold; color:yellow;"}

:::
:::


## {#agenda-advanced data-menu-title="agenda-advanced"}

AGENDA

::: very_small_text

::: {style="opacity:0.3;"}

[workflows]{style="font-weight:bold; color:yellow;"}

- <u>Describe</u> various coding workflows
- <u>Paraphrase</u> how version control workflows facilitate collaboration on code products


[Git & GitHub]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the difference between Git and GitHub
- <u>Navigate</u> GitHub via a web browser
:::

::: {.column width="50%"}
- <u>Use</u> GitHub to create a new repository
- <u>Edit</u> a new repository through GitHub's interface
:::

::::

[RStudio (local <--> cloud)]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the computer-to-GitHub order of operations
- <u>Define</u> fundamental Git vocabulary
:::

::: {.column width="50%"}
- <u>Create</u> a local version-controlled repository that is connected to GitHub
:::

::::

:::

[advanced topics: conflicts, branches, forks]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the causes of merge conflicts
- <u>Explain</u> how to avoid merge conflicts
:::

::: {.column width="50%"}
- <u>Summarise</u> what to do if a merge conflict occurs
:::

::::

::: {style="opacity:0.3;"}

[project management: issues, projects, READMEs]{style="font-weight:bold; color:yellow;"}

[miscellaneous: data, best practices]{style="font-weight:bold; color:yellow;"}

:::
:::
:::


## [GitHub]{style="color:#74C0FC"} organization

::: {style="font-size:0.6em;"}
* repositories can be [public]{style="color:yellow"} (controlled write access) or [private]{style="color:yellow"} (controlled read access)
* repository owner can provide write access to other accounts
* [organizations]{style="color:yellow"} can link many accounts
  + accounts within organizations can be organized into [teams]{style="color:yellow"} for additional organization and access control
:::

::: {style="background:white; width:80%; display:block; margin-left:auto; margin-right:auto"}
![](images/organization_github.png){fig-align="center"}
:::


## workflows: conflicts <i style=color:red; class="fa-solid fa-code-merge"></i>

[workflows within groups]{style="color:yellow;"}

![](images/git_team.png){style="background:white;" width=50%; fig-align="center"}


## workflows: branches <i style=color:blue; class="fa-solid fa-code-branch"></i>


## workflows: forks <i style=color:grey; class="fa-solid fa-code-fork"></i>

![](images/git_team.png){style="background:white;" width=50%; fig-align="center"}


## workflows: forks <i style=color:grey; class="fa-solid fa-code-fork"></i>

::: {style="background:white;"}
::: {layout-ncol=3}

![](images/fork.png){width=100%}

::: {.fragment}
![](images/cannot_push_fork.png){width=100%}
:::

::: {.fragment}
![](images/git_team_pull.png){width=100%}
:::

::: 
:::


## {#agenda-project_management data-menu-title="agenda-project_management"}

AGENDA

::: very_small_text

::: {style="opacity:0.3;"}

[workflows]{style="font-weight:bold; color:yellow;"}

- <u>Describe</u> various coding workflows
- <u>Paraphrase</u> how version control workflows facilitate collaboration on code products


[Git & GitHub]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the difference between Git and GitHub
- <u>Navigate</u> GitHub via a web browser
:::

::: {.column width="50%"}
- <u>Use</u> GitHub to create a new repository
- <u>Edit</u> a new repository through GitHub's interface
:::

::::

[RStudio (local <--> cloud)]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the computer-to-GitHub order of operations
- <u>Define</u> fundamental Git vocabulary
:::

::: {.column width="50%"}
- <u>Create</u> a local version-controlled repository that is connected to GitHub
:::

::::


[advanced topics: conflicts, branches, forks]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the causes of merge conflicts
- <u>Explain</u> how to avoid merge conflicts
:::

::: {.column width="50%"}
- <u>Summarise</u> what to do if a merge conflict occurs
:::

::::

:::

[project management: issues, projects, READMEs]{style="font-weight:bold; color:yellow;"}

::: {style="opacity:0.3;"}

[miscellaneous: data, best practices]{style="font-weight:bold; color:yellow;"}

:::
:::
:::


## {#agenda-best_practices data-menu-title="agenda-best_practices"}

AGENDA

::: very_small_text

::: {style="opacity:0.3;"}

[workflows]{style="font-weight:bold; color:yellow;"}

- <u>Describe</u> various coding workflows
- <u>Paraphrase</u> how version control workflows facilitate collaboration on code products


[Git & GitHub]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the difference between Git and GitHub
- <u>Navigate</u> GitHub via a web browser
:::

::: {.column width="50%"}
- <u>Use</u> GitHub to create a new repository
- <u>Edit</u> a new repository through GitHub's interface
:::

::::

[RStudio (local <--> cloud)]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the computer-to-GitHub order of operations
- <u>Define</u> fundamental Git vocabulary
:::

::: {.column width="50%"}
- <u>Create</u> a local version-controlled repository that is connected to GitHub
:::

::::


[advanced topics: conflicts, branches, forks]{style="font-weight:bold; color:yellow;"}

:::: {.columns}

::: {.column width="40%"}
- <u>Describe</u> the causes of merge conflicts
- <u>Explain</u> how to avoid merge conflicts
:::

::: {.column width="50%"}
- <u>Summarise</u> what to do if a merge conflict occurs
:::

::::


[project management: issues, projects, READMEs]{style="font-weight:bold; color:yellow;"}

:::

[miscellaneous: data, best practices]{style="font-weight:bold; color:yellow;"}

:::


## BPs: the data {.center}

![](images/workflow-no-server.png){width=80% fig-align="center"}


## BPs: file types


## BPs: commit messages[^2]

::: {.r-stack}
![](images/commit_message_prefixes.png){width=100% fig-align="center"}
:::

[fix: change reference from child development lab to child study lab]{style="font-style:italic; font-size: 0.8em; color:yellow; text-align:center;"}

[^2]: [www.conventionalcommits.org](https://www.conventionalcommits.org/en/v1.0.0/)
